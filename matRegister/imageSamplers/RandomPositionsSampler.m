classdef RandomPositionsSampler < ImageSampler
%RANDOMPOSITIONSSAMPLER Sample random positions within image extent.
%
%   output = RandomPositionsSampler(input)
%
%   Example
%   RandomPositionsSampler
%
%   See also
%

% ------
% Author: David Legland
% e-mail: david.legland@inra.fr
% Created: 2011-07-20,    using Matlab 7.9.0.529 (R2009b)
% Copyright 2011 INRA - Cepia Software Platform.

%% Properties
properties
    % the base image
    Image;
    
    % number of points to generate
    NPoints;
    
    % generated points
    Points;
end


%% Static factory
methods (Static = true)
    function sampler = create(image, n)
        sampler = RandomPositionsSampler(image, n);
    end
end


%% Constructor
methods
    function obj = RandomPositionsSampler(varargin)
        
        if nargin < 1
            return;
        end
        
        var = varargin{1};
        if isa(var, 'Image')
            % initialisation constructor
            obj.Image = var;
            obj.NPoints = varargin{2};
            updatePoints(obj);
            
        elseif isa(var, 'RandomPositionsSampler')
            % copy constructor
            obj.Image   = var.Image;
            obj.NPoints = var.NPoints;
            obj.Points  = var.Points;
            
        end
        
    end
end


%% General methods
methods
    function n = positionNumber(obj)
        % Number of positions generated by obj sampler
        n = obj.NPoints;
    end
    
    function points = positions(obj)
        % Return the array of sampled positions
        
        points = obj.Points;
    end
    
    function updatePoints(obj)
        
        N = obj.NPoints;
        
        % image physical bounds
        box = physicalExtent(obj.Image);
        
        % extract box bounds
        xmin = box(1);
        xmax = box(2);
        ymin = box(3);
        ymax = box(4);
        
        % compute size of box
        dx = xmax - xmin;
        dy = ymax - ymin;
        
        % compute point coordinates
        nd = ndims(obj.Image);
        if nd == 2
            % 2D images
            obj.Points = [rand(N, 1)*dx+xmin , rand(N, 1)*dy+ymin];
            
        elseif nd == 3
            % 3D images
            zmin = box(5);
            zmax = box(6);
            dz = zmax - zmin;
            obj.Points = [rand(N, 1)*dx+xmin, rand(N, 1)*dy+ymin, ...
                rand(N, 1)*dz+zmin];
            
        else
            error(['Not implemented for dimension ' num2str(nd)]);
        end
        
    end
end

end